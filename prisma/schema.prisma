generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid())
  email            String            @unique
  clerkUserId      String            @unique

  workspaces       Workspace[]
  tasks            Task[]
  notes            Note[]
  oauthStates      OAuthState[]
  oauthConnections OAuthConnection[]
  authors          Author[]
  sermonNotes      SermonNote[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Workspace {
  id        Int           @id @default(autoincrement())
  uuid      String        @unique @default(uuid())
  name      String        @db.VarChar(50)
  type      WorkspaceType @default(DEFAULT)
  color     String        @default("#3B82F6")
  icon      String        @default("Croissant")
  
  user      User          @relation(fields: [userId], references: [id])
  userId    Int

  tasks     Task[]
  notes     Note[]
  tags      Tag[]
  taskTypes TaskType[]
  posts     Post[]
  sermonNotes SermonNote[]
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Task {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  title         String        @db.VarChar(100)
  description   String?
  dueDate       DateTime?
  status        TaskStatus    @default(TODO)
  priority      TaskPriority?
  
  taskType      TaskType?     @relation(fields: [taskTypeId], references: [autoId])
  taskTypeId    Int?
  tags          TaskTag[]
  
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  workspace     Workspace     @relation(fields: [workspaceUuid], references: [uuid])
  workspaceUuid String
  workspaceId   Int?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Tag {
  autoId        Int       @id @default(autoincrement())
  cuid          String    @unique @default(cuid())
  name          String    @db.VarChar(50)
  color         String    @default("#3B82F6")
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   Int
  
  tasks         TaskTag[]
  posts         PostTag[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model TaskTag {
  task          Task      @relation(fields: [taskId], references: [id])
  taskId        Int
  
  tag           Tag       @relation(fields: [tagId], references: [autoId])
  tagId         Int
  
  createdAt     DateTime  @default(now())

  @@id([taskId, tagId])
}

model TaskType {
  autoId        Int       @id @default(autoincrement())
  cuid          String    @unique @default(cuid())
  name          String    @db.VarChar(50)
  color         String    @default("#3B82F6")
  icon          String    @default("Bug")
  
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   Int
  
  tasks         Task[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Note {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  title         String    @db.VarChar(100)
  content       String

  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  workspace     Workspace @relation(fields: [workspaceUuid], references: [uuid])
  workspaceUuid String
  workspaceId   Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  autoId        Int           @id @default(autoincrement())
  cuid          String        @unique @default(cuid())
  title         String        @db.VarChar(100)
  slug          String        @unique
  content       String
  image         String?
  readTime      Int
  views         Int           @default(0)
  status        PostStatus    @default(DRAFT)
  publishedAt   DateTime?
  
  author        Author        @relation(fields: [authorId], references: [autoId])
  authorId      Int
  
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId   Int
  
  tags          PostTag[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model PostTag {
  post          Post      @relation(fields: [postId], references: [autoId])
  postId        Int
  
  tag           Tag       @relation(fields: [tagId], references: [autoId])
  tagId         Int
  
  createdAt     DateTime  @default(now())

  @@id([postId, tagId])
}

model Author {
  autoId        Int       @id @default(autoincrement())
  firstName     String    @db.VarChar(100)
  lastName      String    @db.VarChar(100)
  
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  
  posts         Post[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SermonNote {
  id          Int                @id @default(autoincrement())
  cuid        String             @unique @default(cuid())
  title       String             @db.VarChar(100)
  markdown    String?
  ocrText     String?
  status      SermonNoteStatus   @default(UPLOADED)
  
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  
  images      Image[]            
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum SermonNoteStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

model Image {
  id              Int       @id @default(autoincrement())
  cuid            String    @unique @default(cuid())
  s3Key           String    // S3 storage key
  originalName    String    // Original filename
  mimeType        String    // image/jpeg, etc.
  fileSize        Int       // Size in bytes
  width           Int?      // Image dimensions
  height          Int?
  alt             String?   // Alt text for accessibility
  
  entityType      ImageEntityType
  entityId        Int
  
  sermonNote      SermonNote?     @relation(fields: [entityId], references: [id], map: "Image_SermonNote")
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([entityType, entityId])
}

enum ImageEntityType {
  SERMON_NOTE
  NOTE  
  POST
}

model OAuthState {
  id        Int           @id @default(autoincrement())
  state     String        @unique
  userId    Int
  provider  OAuthProvider
  used      Boolean       @default(false)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

model OAuthConnection {
  userId       Int
  provider     OAuthProvider
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  user         User          @relation(fields: [userId], references: [id])

  @@id([userId, provider])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  BLOCKED
  COMPLETED
  CLOSED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum WorkspaceType {
  BLOG
  DEFAULT
  DEVELOPMENT
  FAITH
  FINANCE
  HEALTH
  SCHOOL
  WORK
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OAuthProvider {
  SCHWAB
}