generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  uuid             String            @unique @default(uuid())
  email            String            @unique
  clerkUserId      String            @unique

  workspaces       Workspace[]
  tasks            Task[]
  notes            Note[]
  oauthStates      OAuthState[]
  oauthConnections OAuthConnection[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Workspace {
  id        Int           @id @default(autoincrement())
  uuid      String        @unique @default(uuid())
  name      String        @db.VarChar(50)
  type      WorkspaceType @default(DEFAULT)
  color     String        @default("#3B82F6")
  icon      String        @default("Croissant")
  
  user      User          @relation(fields: [userId], references: [id])
  userId    Int

  tasks     Task[]
  notes     Note[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Task {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  title         String        @db.VarChar(100)
  description   String?
  dueDate       DateTime?
  status        TaskStatus    @default(TODO)
  priority      TaskPriority?
  
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  workspace     Workspace     @relation(fields: [workspaceUuid], references: [uuid])
  workspaceUuid String
  workspaceId   Int?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Note {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  title         String    @db.VarChar(100)
  content       String

  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  workspace     Workspace @relation(fields: [workspaceUuid], references: [uuid])
  workspaceUuid String
  workspaceId   Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model OAuthState {
  id        Int           @id @default(autoincrement())
  state     String        @unique
  userId    Int
  provider  OAuthProvider
  used      Boolean       @default(false)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
}

model OAuthConnection {
  userId       Int
  provider     OAuthProvider
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  user         User          @relation(fields: [userId], references: [id])

  @@id([userId, provider])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  BLOCKED
  COMPLETED
  CLOSED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum WorkspaceType {
  DEFAULT
  DEV
  FAITH
  FAMILY
  FITNESS
  FINANCE
  PERSONAL
  SCHOOL
  WORK
}

enum OAuthProvider {
  SCHWAB
}
