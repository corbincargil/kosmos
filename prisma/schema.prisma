generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  uuid        String      @unique @default(uuid())
  email       String      @unique
  clerkUserId String      @unique
  workspaces  Workspace[]
  tasks       Task[]
  notes       Note[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Workspace {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String   @db.VarChar(50)
  color     String   @default("#3B82F6")
  icon      String   @default("Croissant")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tasks     Task[]
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  title         String        @db.VarChar(100)
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  workspace     Workspace     @relation(fields: [workspaceUuid], references: [uuid])
  workspaceId   Int?
  workspaceUuid String
  description   String?
  dueDate       DateTime?
  status        TaskStatus    @default(TODO)
  priority      TaskPriority?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Note {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  title         String    @db.VarChar(100)
  content       String    @db.Text
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceUuid], references: [uuid])
  workspaceId   Int?
  workspaceUuid String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
